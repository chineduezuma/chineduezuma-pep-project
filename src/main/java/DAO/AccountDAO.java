package DAO;

import Model.*;
import Util.ConnectionUtil;

import java.sql.*;


public class AccountDAO {


    /**
     * Adding a new user record into the database which matches the values contained in the account object.
     * Using the getters already written in the account class to retrieve its values (getUsername(),
     * getPassword()). The account_id will be automatically generated by the SQL database, and JDBC will be able
     * to retrieve the generated ID automatically. That means that during insert the new user, only need
     * the username and password values (two columns total!)
     *
     *
     * Remember that the format of a insert PreparedStatement written as a string works something like this:
     * String sql = "insert into TableName (ColumnName1, ColumnName2) values (?, ?);";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from one) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     *
     * @param account an object modelling a Account. the account object does not contain a account ID.
     */
    public Account insertNewUserAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        
            try {
                //SQL logic. When inserting, defined the username and password values
                //values (two columns total!)
                String sql = "INSERT INTO account(username, password) VALUES (?, ?)";
                PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

                //write preparedStatement's setString and setInt methods here.
                preparedStatement.setString(1, account.getUsername());
                preparedStatement.setString(2, account.getPassword());


                preparedStatement.executeUpdate();
                ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
                if(pkeyResultSet.next()){
                    int generated_account_id = (int) pkeyResultSet.getLong(1);
                    return new Account(generated_account_id, account.getUsername(), account.getPassword());
                }
            }catch(SQLException e){
                System.out.println(e.getMessage());
            }
        
        return null;
    }



    /**
     * Retrieve an account using an account object.
     *
     * Remember that the format of a select where statement written as a Java String looks something like this:
     * String sql = "select * from TableName where ColumnName = ?";
     * The question marks will be filled in by the preparedStatement setString, setInt, etc methods. they follow
     * this format, where the first argument identifies the question mark to be filled (left to right, starting
     * from one) and the second argument identifies the value to be used:
     * preparedStatement.setString(1,string1);
     * preparedStatement.setString(2,string2);
     *
     * @param account an object modelling a Account. the account object does not contain a account ID.
     */
    public Account getAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM account WHERE username = ? AND password = ?";
            
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setString and setInt methods here.
            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Account account1 = new Account(rs.getInt("account_id"), rs.getString("username"),
                        rs.getString("password"));
                return account1;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }


}

